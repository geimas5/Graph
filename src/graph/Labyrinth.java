/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package graph;

import java.awt.Color;
import java.awt.Component;
import java.util.AbstractList;
import java.util.ArrayList;
import javax.swing.*;

/**
 *
 * @author mariusg
 */
public class Labyrinth extends javax.swing.JFrame implements IGraph {

    /*
    private final int totalColumns = 30;
    private final int totalRows = 15;
    */
    
    private final int totalColumns = 10;
    private final int totalRows = 10;
    
    private AbstractList<JToggleButton> squareButtons = null;
    
    private JToggleButton startSquareButton;
    private JToggleButton endSquareButton;
    
    /**
     * Creates new form Labyrinth
     */
    public Labyrinth() {
        initComponents();
        
        createButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labyrinthPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout labyrinthPanelLayout = new javax.swing.GroupLayout(labyrinthPanel);
        labyrinthPanel.setLayout(labyrinthPanelLayout);
        labyrinthPanelLayout.setHorizontalGroup(
            labyrinthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );
        labyrinthPanelLayout.setVerticalGroup(
            labyrinthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        startButton.setText("Start");
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onStart(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(labyrinthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(startButton)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(labyrinthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(startButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onStart(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onStart
        Dijkstra alg = new Dijkstra();
        Vertex start = new Vertex(startSquareButton.getName(), startSquareButton.getName());
        Vertex end = new Vertex(endSquareButton.getName(), endSquareButton.getName());
        
        Vertex[] path = alg.calculatePath(start, end, this);

        paintPath(path);
    }//GEN-LAST:event_onStart

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Labyrinth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Labyrinth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Labyrinth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Labyrinth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Labyrinth().setVisible(true);
            }
        });
    }
    
    private void createButtons() {
        squareButtons = new ArrayList<>();
        
        for(int r = 0; r < totalRows; r++){
            for(int c = 0; c < totalColumns; c++) {
                JToggleButton tb = new JToggleButton();
                tb.setName(r + "_" + c);
                squareButtons.add(tb);
                
                if((Math.floor(totalRows / 2) == r) && (c == 0 || c + 1 == totalColumns)) {
                    tb.setSelected(true);
                    tb.setEnabled(false);
                    
                    if(c + 1 == totalColumns)
                    {
                        tb.setText("E");
                        this.endSquareButton = tb;
                    }
                    else
                    {
                        tb.setText("S");
                        this.startSquareButton = tb;
                    }
                }
                
                tb.setBounds(30*c, 30*r, 30, 30);
                labyrinthPanel.add(tb);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel labyrinthPanel;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    /*
    @Override
    public Edge[] getEdges() {
        HashMap<String, Vertex> verticies = new HashMap<>();
        HashMap<String, Vertex> edges = new HashMap<>();
        
        ArrayList<JToggleButton> buttons = new ArrayList<>();
        
        for(Component c : labyrinthPanel.getComponents()){
            if(!(c instanceof JToggleButton))
                continue;
            
            buttons.add((JToggleButton)c);
        }
         
        
         for(int r = 0; r < totalRows; r++){
            for(int c = 0; c < totalColumns; c++) {
                JToggleButton btn = (JToggleButton)labyrinthPanel.findComponentAt(c*30, r*30);
                
                
                String vertexName = r + "_" + c;
                Vertex vertex = verticies.get(vertexName);
                
                if(vertex == null) {
                    vertex = new Vertex(vertexName, vertexName);
                    verticies.put(vertexName, vertex);
                }
            }
        }
         
        return null;
    }
    
    */

    @Override
    public Edge[] findEdges(Vertex source) {
        ArrayList<Edge> edges = new ArrayList<>();
        
        String[] parts = source.getId().split("_");
        int row = Integer.parseInt(parts[0]);
        int col = Integer.parseInt(parts[1]);
        
        if(row > 0 && isPath(row -1, col))
            edges.add(createEdge(source, row - 1, col));
        
        if(row + 1 < totalRows && isPath(row + 1, col))
            edges.add(createEdge(source, row + 1, col));
        
        if(col + 1 < totalColumns && isPath(row, col + 1))
            edges.add(createEdge(source, row, col + 1));
        
        if(col > 0 && isPath(row, col - 1))
            edges.add(createEdge(source, row, col - 1));
        
        Edge[] edgesArr = new Edge[edges.size()];
        return edges.toArray(edgesArr);
    }
    
    private Edge createEdge(Vertex source, int destinationRow, int destinationCol) {
        String destName = createVertexName(destinationRow, destinationCol);
        Vertex dest = new Vertex(destName, destName);
        
        Edge e = new Edge(source.getId() + " + " + destName, source, dest, 1);
        return e;
    }
    
    private boolean isPath(int row, int col){
        Component[] components = labyrinthPanel.getComponents();
        String name = createVertexName(row, col);
        
        for(Component c : components){
            if(!c.getName().equals(name))
                continue;
            
            JToggleButton btn = (JToggleButton)c;
            return btn.isSelected();
        }
        
        return false;
    }
    
    private String createVertexName(int row, int col) {
        return row + "_" + col;
    }
    
    private void paintPath(Vertex[] path){
        
        
        for(int b = 0; b < squareButtons.size(); b++) {
            JToggleButton btn = squareButtons.get(b);
            if(btn.isEnabled())
                btn.setSelected(false);
            
            for(int p = 0; p < path.length; p++) {
                if(btn.getName().equals(path[p].getName())) {
                    btn.setBackground(Color.red);
                    break;
                }
                else
                    btn.setBackground(Color.blue);
            }
        }
    }
}
